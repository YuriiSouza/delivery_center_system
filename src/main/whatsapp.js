import pkg from 'whatsapp-web.js';
const { Client, LocalAuth } = pkg;
import qrcode from 'qrcode-terminal';
import { join } from 'path';

class WhatsAppAutomation {
  constructor() {
    this.client = null;
    this.isRunning = false;
    this.shouldStop = false;
    this.isReady = false;
  }

  /**
   * Inicializar WhatsApp Web
   */
  async initialize(onProgress) {
    return new Promise((resolve, reject) => {
      try {
        onProgress?.('Configurando WhatsApp Web...');

        // Criar cliente com autentica√ß√£o local (salva sess√£o)
        this.client = new Client({
          authStrategy: new LocalAuth({
            clientId: 'delivery-central-system',
            dataPath: join(process.cwd(), '.wwebjs_auth')
          }),
          puppeteer: {
            headless: false, // Mostra o navegador
            args: [
              '--no-sandbox',
              '--disable-setuid-sandbox',
              '--disable-dev-shm-usage',
              '--disable-accelerated-2d-canvas',
              '--no-first-run',
              '--no-zygote',
              '--disable-gpu'
            ]
          }
        });

        // Evento: QR Code gerado
        this.client.on('qr', (qr) => {
          console.log('üì± QR Code gerado!');
          onProgress?.('üì± Escaneie o QR Code no navegador que abriu');
          
          // Mostrar QR code no terminal tamb√©m
          qrcode.generate(qr, { small: true });
        });

        // Evento: Autenticando
        this.client.on('authenticated', () => {
          console.log('‚úÖ Autenticado!');
          onProgress?.('‚úÖ Autenticado com sucesso!');
        });

        // Evento: Falha na autentica√ß√£o
        this.client.on('auth_failure', (msg) => {
          console.error('‚ùå Falha na autentica√ß√£o:', msg);
          onProgress?.('‚ùå Falha na autentica√ß√£o. Tente novamente.');
          reject(new Error('Falha na autentica√ß√£o'));
        });

        // Evento: Cliente pronto
        this.client.on('ready', () => {
          console.log('üöÄ WhatsApp Web est√° pronto!');
          this.isReady = true;
          this.isRunning = true;
          onProgress?.('üöÄ WhatsApp Web conectado e pronto!');
          resolve({ success: true });
        });

        // Evento: Desconectado
        this.client.on('disconnected', (reason) => {
          console.log('‚ö†Ô∏è WhatsApp desconectado:', reason);
          this.isReady = false;
          this.isRunning = false;
          onProgress?.('‚ö†Ô∏è WhatsApp desconectado');
        });

        // Inicializar cliente
        onProgress?.('Inicializando WhatsApp Web...');
        this.client.initialize();

      } catch (error) {
        console.error('Erro ao inicializar WhatsApp:', error);
        reject({ success: false, error: error.message });
      }
    });
  }

  /**
   * Formatar n√∫mero de telefone
   */
formatPhoneNumber(phoneNumber) {
  console.log('\n=== FORMATANDO N√öMERO ===');
  console.log('üìû Entrada:', phoneNumber);
  
  // Converter para string e remover tudo que n√£o √© n√∫mero
  let cleaned = String(phoneNumber).replace(/\D/g, '');
  console.log('üßπ Limpo:', cleaned);
  console.log('üìè Tamanho:', cleaned.length);
  
  // Remover c√≥digo do pa√≠s se j√° tiver (55)
  if (cleaned.startsWith('55')) {
    cleaned = cleaned.substring(2);
    console.log('üåç Removeu c√≥digo pa√≠s:', cleaned);
  }
  
  // Verificar tamanho do n√∫mero
  // DDD (2 d√≠gitos) + Celular (9 d√≠gitos) = 11 d√≠gitos
  // DDD (2 d√≠gitos) + Fixo (8 d√≠gitos) = 10 d√≠gitos
  
  if (cleaned.length === 11) {
    // Celular: DDD + 9XXXXXXXX
    console.log('üì± Tipo: Celular (11 d√≠gitos)');
  } else if (cleaned.length === 10) {
    // Fixo: DDD + XXXXXXXX
    console.log('üìû Tipo: Fixo (10 d√≠gitos)');
  } else if (cleaned.length === 9) {
    // Pode ser celular sem DDD - ERRO!
    console.warn('‚ö†Ô∏è ATEN√á√ÉO: N√∫mero com 9 d√≠gitos - falta DDD!');
    throw new Error(`N√∫mero inv√°lido (falta DDD): ${phoneNumber}`);
  } else if (cleaned.length === 8) {
    // Pode ser fixo sem DDD - ERRO!
    console.warn('‚ö†Ô∏è ATEN√á√ÉO: N√∫mero com 8 d√≠gitos - falta DDD!');
    throw new Error(`N√∫mero inv√°lido (falta DDD): ${phoneNumber}`);
  } else {
    console.error('‚ùå Tamanho inv√°lido:', cleaned.length);
    throw new Error(`N√∫mero com tamanho inv√°lido: ${phoneNumber} (${cleaned.length} d√≠gitos)`);
  }
  
  // Adicionar c√≥digo do pa√≠s (55)
  const withCountryCode = '55' + cleaned;
  console.log('üåç Com c√≥digo pa√≠s:', withCountryCode);
  
  // Criar chatId
  const chatId = withCountryCode + '@c.us';
  console.log('üí¨ ChatId final:', chatId);
  console.log('========================\n');
  
  return chatId;
}

  /**
   * Enviar mensagem para um n√∫mero
   */
  async sendMessage(phoneNumber, message, onProgress) {
    try {
      if (!this.client || !this.isReady) {
        throw new Error('WhatsApp n√£o est√° pronto. Inicialize primeiro.');
      }

      onProgress?.(`Enviando para ${phoneNumber}...`);

      // Formatar n√∫mero
      const chatId = this.formatPhoneNumber(phoneNumber);

      // Verificar se o n√∫mero existe no WhatsApp
      const isRegistered = await this.client.isRegisteredUser(chatId);
      
      if (!isRegistered) {
        throw new Error('N√∫mero n√£o possui WhatsApp');
      }

      // Enviar mensagem
      await this.client.sendMessage(chatId, message);

      onProgress?.(`‚úÖ Enviado para ${phoneNumber}`);

      return { success: true };
    } catch (error) {
      console.error(`Erro ao enviar para ${phoneNumber}:`, error);
      onProgress?.(`‚ùå Falhou: ${phoneNumber} - ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  /**
   * Enviar mensagens para m√∫ltiplos n√∫meros
   */
  async sendBulkMessages(phoneNumbers, message, delay = 3000, onProgress) {
    const results = {
      total: phoneNumbers.length,
      sent: 0,
      failed: 0,
      errors: [],
    };

    if (!this.client || !this.isReady) {
      return {
        success: false,
        error: 'WhatsApp n√£o est√° pronto',
        results
      };
    }

    this.shouldStop = false;

    for (let i = 0; i < phoneNumbers.length && !this.shouldStop; i++) {
      const phone = phoneNumbers[i];

      // Notificar progresso
      onProgress?.({
        type: 'progress',
        current: i + 1,
        total: phoneNumbers.length,
        phone,
      });

      // Enviar mensagem
      const result = await this.sendMessage(phone, message, (msg) => {
        onProgress?.({ type: 'log', message: msg });
      });

      if (result.success) {
        results.sent++;
      } else {
        results.failed++;
        results.errors.push({ phone, error: result.error });
      }

      // Delay entre mensagens (evita bloqueio)
      if (i < phoneNumbers.length - 1 && !this.shouldStop) {
        await this.sleep(delay);
      }
    }

    return { success: true, results };
  }

  /**
   * Parar execu√ß√£o
   */
  stop() {
    this.shouldStop = true;
    console.log('‚èπÔ∏è Parando envio de mensagens...');
  }

  /**
   * Fechar WhatsApp
   */
  async close() {
    try {
      if (this.client) {
        await this.client.destroy();
        this.client = null;
        this.isReady = false;
        this.isRunning = false;
      }
      return { success: true };
    } catch (error) {
      console.error('Erro ao fechar WhatsApp:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Verificar status
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      isReady: this.isReady,
      isInitialized: this.client !== null,
    };
  }

  /**
   * Sleep helper
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

export default WhatsAppAutomation;